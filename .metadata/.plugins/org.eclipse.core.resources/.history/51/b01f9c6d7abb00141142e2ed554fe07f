package com.slart.ttracker.database.dao;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Comment;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

import com.slart.ttracker.database.DatabaseHelper;
import com.slart.ttracker.database.table.CategoryTable;

public class CategoryDao {
	
	public class CommentsDataSource {

		// Database fields
		private SQLiteDatabase database;
		private DatabaseHelper dbHelper;
		private String[] allColumns = { CategoryTable.COLUMN_ID, CategoryTable.COLUMN_NAME };

		public CommentsDataSource(Context context) {
			dbHelper = new DatabaseHelper(context);
		}

		public void open() throws SQLException {
			database = dbHelper.getWritableDatabase();
		}

		public void close() {
			dbHelper.close();
		}

		public Comment createComment(String comment) {
			ContentValues values = new ContentValues();
			values.put(CategoryTable.COLUMN_NAME, comment);
			long insertId = database.insert(CategoryTable.TABLE_CATEGORY, null,
					values);
			Cursor cursor = database.query(CategoryTable.TABLE_CATEGORY,
					allColumns, CategoryTable.COLUMN_ID + " = " + insertId, null,
					null, null, null);
			cursor.moveToFirst();
			Comment newComment = cursorToComment(cursor);
			cursor.close();
			return newComment;
		}

		public void deleteComment(Comment comment) {
			long id = comment.getId();
			System.out.println("Comment deleted with id: " + id);
			database.delete(CategoryTable.TABLE_CATEGORY, CategoryTable.COLUMN_ID
					+ " = " + id, null);
		}

		public List<Comment> getAllComments() {
			List<Comment> comments = new ArrayList<Comment>();

			Cursor cursor = database.query(CategoryTable.TABLE_CATEGORY,
					allColumns, null, null, null, null, null);

			cursor.moveToFirst();
			while (!cursor.isAfterLast()) {
				Comment comment = cursorToComment(cursor);
				comments.add(comment);
				cursor.moveToNext();
			}
			// make sure to close the cursor
			cursor.close();
			return comments;
		}

		private Comment cursorToComment(Cursor cursor) {
			Comment comment = new Comment();
			comment.setId(cursor.getLong(0));
			comment.setComment(cursor.getString(1));
			return comment;
		}
	} 



}
