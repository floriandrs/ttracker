package com.slart.ttracker.activitiy;

import java.util.Calendar;

import util.DbUtil;

import android.app.ListActivity;
import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.PopupMenu.OnMenuItemClickListener;

import com.slart.ttracker.R;
import com.slart.ttracker.database.TrackContentProvider;
import com.slart.ttracker.database.TrackCursorAdapter;
import com.slart.ttracker.database.TrackTable;

public class ViewAllTracksActivity extends ListActivity implements LoaderManager.LoaderCallbacks<Cursor> {

	private static final int ACTIVITY_CREATE = 0;
	private static final int ACTIVITY_EDIT = 1;
	private static final int DELETE_ID = Menu.FIRST + 1;
	private TrackCursorAdapter adapter;

	@Override
	  public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    
	    setContentView(R.layout.activity_view_all_tracks);

	    ListView listView = getListView();
	    listView.setDividerHeight(3);
	    fillData();
	    registerForContextMenu(listView);

	    //listView.setOnClickListener();
	    
	    /*
	    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
	    listView.setMultiChoiceModeListener(new MultiChoiceModeListener() {

	        @Override
	        public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
	            // Here you can do something when items are selected/de-selected,
	            // such as update the title in the CAB
	        }

	        @Override
	        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
	            // Respond to clicks on the actions in the CAB
	            switch (item.getItemId()) {
	                case R.id.action_settings:
	                    deleteSelectedItems();
	                    mode.finish(); // Action picked, so close the CAB
	                    return true;
	                default:
	                    return false;
	            }
	        }

	        private void deleteSelectedItems() {
				// TODO Auto-generated method stub
				
			}

			@Override
	        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
	            // Inflate the menu for the CAB
	            MenuInflater inflater = mode.getMenuInflater();
	            inflater.inflate(R.menu.create_new_track, menu);
	            return true;
	        }

	        @Override
	        public void onDestroyActionMode(ActionMode mode) {
	            // Here you can make any necessary updates to the activity when
	            // the CAB is removed. By default, selected items are deselected/unchecked.
	        }

	        @Override
	        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
	            // Here you can perform updates to the CAB due to
	            // an invalidate() request
	            return false;
	        }
	    });
	    */


	  }
	
	private void fillData() {

	    getLoaderManager().initLoader(0, null, this);
	    //adapter = new SimpleCursorAdapter(this, R.layout.track_row, null, from, to, 0);
	    adapter = new TrackCursorAdapter(this, null, 0);

	    setListAdapter(adapter);

	  }


	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.view_all_tracks, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	// creates a new loader after the initLoader () call
	  @Override
	  public Loader<Cursor> onCreateLoader(int id, Bundle args) {
		  String[] projection = TrackTable.getProjection();
	    CursorLoader cursorLoader = new CursorLoader(this, TrackContentProvider.CONTENT_URI, projection, null, null, null);
	    return cursorLoader;
	  }

	  @Override
	  public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
	    adapter.swapCursor(data);
	  }

	  @Override
	  public void onLoaderReset(Loader<Cursor> loader) {
	    // data is not available anymore, delete reference
	    adapter.swapCursor(null);
	  }
	  
	  public void showTrackMenu(View v) {
		    PopupMenu popup = new PopupMenu(this, v);
		    popup.setOnMenuItemClickListener(new OnMenuItemClickListener() {

		    	@Override
		    	public boolean onMenuItemClick(MenuItem item) {

		    		switch (item.getItemId()) {
		    		case R.id.delete_track:
		    			deleteTrack(item);
		    			return true;
		    		default:
		    			return false;

		    		}
		    	}

		    	protected void deleteTrack(MenuItem item) {
		    		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo)item.getMenuInfo();
		    		
		    		if (info == null) {
		    			Uri uri = Uri.parse(TrackContentProvider.CONTENT_URI + "/" + info.position);
		    			getContentResolver().delete(uri, null, null);
		    		}
		    		
		    	}
		    	
		    });
		    popup.inflate(R.menu.track_list_item);
		    popup.show();
	  }
	  
	  
	  @Override
	  public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
	      super.onCreateContextMenu(menu, v, menuInfo);
	      MenuInflater inflater = getMenuInflater();
	      inflater.inflate(R.menu.track_list_item, menu);
	  }
	  
	  @Override
	  public boolean onContextItemSelected(MenuItem item) {
	      AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
	      switch (item.getItemId()) {
	          case R.id.delete_track:
	              deleteTrack(info.id);
	              return true;
	          case R.id.export_track_to_calendar:
	              exportTrackToCalendar(info.id);
	              return true;
	          case R.id.update_track:
	              updateTrack(info.id);
	              return true;
	          case R.id.view_track_in_map:
	              viewTrackInMap(info.id);
	              return true;
	          default:
	              return super.onContextItemSelected(item);
	      }
	  }
	  
	  protected void exportTrackToCalendar(long id) {
		  // Fetch track from db
		  // Export to calendar
		  Calendar cal = Calendar.getInstance();              
		  Intent intent = new Intent(Intent.ACTION_EDIT);
		  intent.setType("vnd.android.cursor.item/event");
		  intent.putExtra("beginTime", cal.getTimeInMillis());
		  intent.putExtra("allDay", true);
		  intent.putExtra("rrule", "FREQ=YEARLY");
		  intent.putExtra("endTime", cal.getTimeInMillis()+60*60*1000);
		  intent.putExtra("title", "A Test Event from android app");
		  startActivity(intent);
	  }

	  protected void updateTrack(long id) {
		  Intent intent = new Intent(this, EditTrackActivity.class);
		  intent.putExtra(TrackContentProvider.CONTENT_ITEM_TYPE, DbUtil.buildUri(id));
		  startActivity(intent);
	  }

	  protected void deleteTrack(long id) {
		  getContentResolver().delete(DbUtil.buildUri(id), null, null);
	  }
	  
	  protected void viewTrackInMap(long id) {
		  String url = "http://maps.google.com/maps?t=h&q=loc:35.487895,-87.332414&z=10";
		  Intent i = new Intent(Intent.ACTION_VIEW);
		  i.setData(Uri.parse(url));
		  startActivity(i);
	  }
	  
}
